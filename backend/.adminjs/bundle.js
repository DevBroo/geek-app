(function (React, designSystem, reactRouterDom, adminjs, recharts) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  // backend/src/admin/components/OrderProductList.jsx


  const OrderProductList = props => {
    // `record` contains the data of the current Order being viewed/edited
    const {
      record,
      property
    } = props;

    // Access the 'products' array from the record parameters
    // Ensure 'products' exists and is an array
    const products = record.params.products || [];
    if (products.length === 0) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        mt: "xl"
      }, "No products in this order.");
    }
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      mb: "default",
      fontWeight: "bold"
    }, "Order Products:"), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableHead, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Product Name"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Quantity"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Price/Unit"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Total Price"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Image"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, products.map((item, index) => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
      key: item.product ? item.product + '_' + index : index
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, item.product ? /*#__PURE__*/React__default.default.createElement(reactRouterDom.Link, {
      to: `/admin/resources/Product/records/${item.product}/show`
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, item.name)) : /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, item.name || 'N/A')), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, item.quantity), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "\u20B9", item.price ? item.price.toFixed(2) : '0.00'), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "\u20B9", ((item.price || 0) * (item.quantity || 0)).toFixed(2)), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, item.image && item.image.url && /*#__PURE__*/React__default.default.createElement("img", {
      src: item.image.url,
      alt: item.name,
      style: {
        width: '50px',
        height: '50px',
        objectFit: 'cover'
      }
    })))))));
  };

  // backend/src/admin/components/Dashboard.jsx

  const api = new adminjs.ApiClient(); // Initialize AdminJS API client

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#d0ed57'];
  const Dashboard = () => {
    const [stats, setStats] = React.useState(null);
    const [loading, setLoading] = React.useState(true);
    const [error, setError] = React.useState(null);
    React.useEffect(() => {
      const fetchDashboardData = async () => {
        try {
          // Fetch data from your custom backend API endpoint
          const response = await api.get('/admin/dashboard/stats');
          if (response.data && response.data.success) {
            setStats(response.data.data);
          } else {
            setError(response.data.message || 'Failed to fetch dashboard data.');
          }
        } catch (err) {
          console.error('Error fetching dashboard data:', err);
          setError(err.message || 'An error occurred while fetching dashboard data.');
        } finally {
          setLoading(false);
        }
      };
      fetchDashboardData();
    }, []);
    if (loading) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        variant: "card",
        p: "xl",
        style: {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          minHeight: '300px'
        }
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
        ml: "default"
      }, "Loading Dashboard Data..."));
    }
    if (error) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        variant: "card",
        p: "xl",
        style: {
          color: 'red'
        }
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
        variant: "text"
      }, "Error: ", error));
    }
    if (!stats) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        variant: "card",
        p: "xl"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
        variant: "text"
      }, "No dashboard data available."));
    }

    // Prepare data for charts
    const orderStatusChartData = stats.orderStatusDistribution.map(item => ({
      name: item.status.charAt(0).toUpperCase() + item.status.slice(1),
      value: item.count
    }));
    const paymentMethodChartData = stats.paymentMethodDistribution.map(item => ({
      name: item.method.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
      value: item.count
    }));
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "card",
      p: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.H1, null, "Dashboard Overview"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "grid",
      gridTemplateColumns: ['1fr', '1fr 1fr', '1fr 1fr 1fr 1fr'],
      gridGap: "20px",
      mb: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Icon, {
      icon: "User",
      mr: "default"
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Total Users")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(designSystem.H2, null, stats.summary.totalUsers))), /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Icon, {
      icon: "Package",
      mr: "default"
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Total Products")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(designSystem.H2, null, stats.summary.totalProducts))), /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Icon, {
      icon: "ShoppingCart",
      mr: "default"
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Total Orders")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(designSystem.H2, null, stats.summary.totalOrders))), /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Icon, {
      icon: "DollarSign",
      mr: "default"
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Total Revenue")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(designSystem.H2, null, "\u20B9", stats.summary.totalRevenue))), /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Icon, {
      icon: "Wallet",
      mr: "default"
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Overall Wallet Balance")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(designSystem.H2, null, "\u20B9", stats.summary.overallWalletBalance))), /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Icon, {
      icon: "HelpCircle",
      mr: "default"
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Unanswered FAQs")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(designSystem.H2, null, stats.summary.unansweredFAQs), stats.summary.unansweredFAQs > 0 && /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      as: "a",
      href: "/admin/resources/FrequentlyAskedQuestion?filters.isAnswered=false",
      size: "sm",
      variant: "primary"
    }, "View Unanswered")))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "grid",
      gridTemplateColumns: ['1fr', '1fr', '1fr 1fr'],
      gridGap: "20px",
      mb: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Order Status Distribution")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(recharts.ResponsiveContainer, {
      width: "100%",
      height: 300
    }, /*#__PURE__*/React__default.default.createElement(recharts.PieChart, null, /*#__PURE__*/React__default.default.createElement(recharts.Pie, {
      data: orderStatusChartData,
      cx: "50%",
      cy: "50%",
      outerRadius: 100,
      fill: "#8884d8",
      dataKey: "value",
      label: ({
        name,
        percent
      }) => `${name} (${(percent * 100).toFixed(0)}%)`
    }, orderStatusChartData.map((entry, index) => /*#__PURE__*/React__default.default.createElement(recharts.Cell, {
      key: `cell-${index}`,
      fill: COLORS[index % COLORS.length]
    }))), /*#__PURE__*/React__default.default.createElement(recharts.Tooltip, null), /*#__PURE__*/React__default.default.createElement(recharts.Legend, null))))), /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Payment Method Distribution")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(recharts.ResponsiveContainer, {
      width: "100%",
      height: 300
    }, /*#__PURE__*/React__default.default.createElement(recharts.PieChart, null, /*#__PURE__*/React__default.default.createElement(recharts.Pie, {
      data: paymentMethodChartData,
      cx: "50%",
      cy: "50%",
      outerRadius: 100,
      fill: "#8884d8",
      dataKey: "value",
      label: ({
        name,
        percent
      }) => `${name} (${(percent * 100).toFixed(0)}%)`
    }, paymentMethodChartData.map((entry, index) => /*#__PURE__*/React__default.default.createElement(recharts.Cell, {
      key: `cell-${index}`,
      fill: COLORS[index % COLORS.length]
    }))), /*#__PURE__*/React__default.default.createElement(recharts.Tooltip, null), /*#__PURE__*/React__default.default.createElement(recharts.Legend, null)))))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "grid",
      gridTemplateColumns: ['1fr'],
      gridGap: "20px",
      mb: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Monthly Revenue Trend (Last 6 Months)")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(recharts.ResponsiveContainer, {
      width: "100%",
      height: 300
    }, /*#__PURE__*/React__default.default.createElement(recharts.BarChart, {
      data: stats.monthlyRevenue,
      margin: {
        top: 5,
        right: 30,
        left: 20,
        bottom: 5
      }
    }, /*#__PURE__*/React__default.default.createElement(recharts.CartesianGrid, {
      strokeDasharray: "3 3"
    }), /*#__PURE__*/React__default.default.createElement(recharts.XAxis, {
      dataKey: "name"
    }), /*#__PURE__*/React__default.default.createElement(recharts.YAxis, null), /*#__PURE__*/React__default.default.createElement(recharts.Tooltip, {
      formatter: value => `₹${value.toFixed(2)}`
    }), /*#__PURE__*/React__default.default.createElement(recharts.Legend, null), /*#__PURE__*/React__default.default.createElement(recharts.Bar, {
      dataKey: "revenue",
      fill: "#8884d8",
      name: "Revenue"
    })))))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Card, {
      variant: "card"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.CardHeader, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "text",
      fontWeight: "bold"
    }, "Recent Transactions")), /*#__PURE__*/React__default.default.createElement(designSystem.CardContent, null, /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableHead, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "User"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Amount"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Type"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Status"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Gateway"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Date"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, stats.recentTransactions.length === 0 ? /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      colSpan: 6,
      style: {
        textAlign: 'center'
      }
    }, "No recent transactions.")) : stats.recentTransactions.map(tx => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
      key: tx._id
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, tx.user ? /*#__PURE__*/React__default.default.createElement(Link, {
      to: `/admin/resources/User/records/${tx.user._id}/show`
    }, tx.user.name || tx.user.email) : 'N/A'), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Badge, {
      variant: tx.type === 'deposit' || tx.type === 'refund_to_wallet' ? 'success' : 'danger'
    }, tx.type === 'deposit' || tx.type === 'refund_to_wallet' ? '+' : '-', "\u20B9", tx.amount.toFixed(2))), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, tx.type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Badge, {
      variant: tx.status === 'completed' ? 'success' : tx.status === 'pending' ? 'info' : 'danger'
    }, tx.status.toUpperCase())), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, tx.paymentGateway.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, new Date(tx.createdAt).toLocaleString())))))))));
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.OrderProductList = OrderProductList;
  AdminJS.UserComponents.Dashboard = Dashboard;

})(React, AdminJSDesignSystem, ReactRouterDOM, AdminJS, recharts);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
